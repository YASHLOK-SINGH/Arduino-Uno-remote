import React, { useState, useEffect } from 'react';
import { Play, Pause, RotateCcw, Upload, Download, Settings, Wifi, Bluetooth, Power, Zap, Cpu, Activity, Thermometer, Lightbulb, Volume2, Camera, Mic, Radio } from 'lucide-react';

const App = () => {
  const [isConnected, setIsConnected] = useState(false);
  const [selectedPin, setSelectedPin] = useState(null);
  const [pinStates, setPinStates] = useState({});
  const [analogValues, setAnalogValues] = useState({});
  const [connectionType, setConnectionType] = useState('bluetooth');
  const [isRunning, setIsRunning] = useState(false);

  // Initialize pin states
  useEffect(() => {
    const initialStates = {};
    const initialAnalog = {};
    
    // Digital pins 0-13
    for (let i = 0; i <= 13; i++) {
      initialStates[`D${i}`] = false;
    }
    
    // Analog pins A0-A5
    for (let i = 0; i <= 5; i++) {
      initialAnalog[`A${i}`] = 0;
    }
    
    setPinStates(initialStates);
    setAnalogValues(initialAnalog);
  }, []);

  const togglePin = (pin) => {
    setPinStates(prev => ({
      ...prev,
      [pin]: !prev[pin]
    }));
  };

  const updateAnalogValue = (pin, value) => {
    setAnalogValues(prev => ({
      ...prev,
      [pin]: value
    }));
  };

  const connectDevice = () => {
    setIsConnected(!isConnected);
  };

  const toggleRunning = () => {
    setIsRunning(!isRunning);
  };

  const resetBoard = () => {
    const resetStates = {};
    const resetAnalog = {};
    
    for (let i = 0; i <= 13; i++) {
      resetStates[`D${i}`] = false;
    }
    
    for (let i = 0; i <= 5; i++) {
      resetAnalog[`A${i}`] = 0;
    }
    
    setPinStates(resetStates);
    setAnalogValues(resetAnalog);
    setIsRunning(false);
  };

  const PinButton = ({ pin, isDigital = true }) => (
    <div className="flex flex-col items-center space-y-2">
      <button
        onClick={() => isDigital && togglePin(pin)}
        className={`w-16 h-16 rounded-lg border-2 transition-all duration-200 ${
          isDigital 
            ? pinStates[pin] 
              ? 'bg-green-500 border-green-600 shadow-lg shadow-green-200' 
              : 'bg-gray-200 border-gray-300 hover:bg-gray-300'
            : 'bg-blue-100 border-blue-300'
        } flex items-center justify-center font-bold text-sm`}
      >
        {pin}
      </button>
      <span className="text-xs text-gray-600">{pin}</span>
    </div>
  );

  const AnalogSlider = ({ pin }) => (
    <div className="flex flex-col space-y-2">
      <div className="flex justify-between text-xs text-gray-600">
        <span>{pin}</span>
        <span>{analogValues[pin]}/1023</span>
      </div>
      <input
        type="range"
        min="0"
        max="1023"
        value={analogValues[pin]}
        onChange={(e) => updateAnalogValue(pin, parseInt(e.target.value))}
        className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
      />
    </div>
  );

  const ControlButton = ({ icon: Icon, label, onClick, active = false, color = 'blue' }) => (
    <button
      onClick={onClick}
      className={`flex flex-col items-center space-y-1 p-3 rounded-lg transition-all duration-200 ${
        active 
          ? `bg-${color}-500 text-white shadow-lg` 
          : 'bg-white text-gray-700 hover:bg-gray-50 border border-gray-200'
      }`}
    >
      <Icon size={20} />
      <span className="text-xs font-medium">{label}</span>
    </button>
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 p-4">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        <div className="bg-white rounded-2xl shadow-lg p-6 mb-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div className="w-12 h-12 bg-blue-600 rounded-xl flex items-center justify-center">
                <Cpu className="text-white" size={24} />
              </div>
              <div>
                <h1 className="text-2xl font-bold text-gray-900">Arduino Uno Controller</h1>
                <p className="text-gray-600">Remote control for Arduino projects</p>
              </div>
            </div>
            
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2">
                <div className={`w-3 h-3 rounded-full ${isConnected ? 'bg-green-500' : 'bg-red-500'}`}></div>
                <span className="text-sm font-medium">
                  {isConnected ? 'Connected' : 'Disconnected'}
                </span>
              </div>
              
              <select
                value={connectionType}
                onChange={(e) => setConnectionType(e.target.value)}
                className="px-3 py-2 border border-gray-300 rounded-lg text-sm"
              >
                <option value="bluetooth">Bluetooth</option>
                <option value="wifi">WiFi</option>
                <option value="usb">USB</option>
              </select>
              
              <button
                onClick={connectDevice}
                className={`px-4 py-2 rounded-lg font-medium transition-all duration-200 ${
                  isConnected
                    ? 'bg-red-500 hover:bg-red-600 text-white'
                    : 'bg-green-500 hover:bg-green-600 text-white'
                }`}
              >
                {isConnected ? 'Disconnect' : 'Connect'}
              </button>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Pin Control Panel */}
          <div className="lg:col-span-2">
            <div className="bg-white rounded-2xl shadow-lg p-6">
              <h2 className="text-xl font-bold text-gray-900 mb-6 flex items-center">
                <Settings className="mr-2" size={20} />
                Pin Control
              </h2>
              
              {/* Digital Pins */}
              <div className="mb-8">
                <h3 className="text-lg font-semibold text-gray-800 mb-4">Digital Pins (0-13)</h3>
                <div className="grid grid-cols-7 gap-3">
                  {Array.from({ length: 14 }, (_, i) => `D${i}`).map(pin => (
                    <PinButton key={pin} pin={pin} isDigital={true} />
                  ))}
                </div>
              </div>
              
              {/* Analog Pins */}
              <div>
                <h3 className="text-lg font-semibold text-gray-800 mb-4">Analog Pins (A0-A5)</h3>
                <div className="space-y-4">
                  {Array.from({ length: 6 }, (_, i) => `A${i}`).map(pin => (
                    <AnalogSlider key={pin} pin={pin} />
                  ))}
                </div>
              </div>
            </div>
          </div>

          {/* Control Panel */}
          <div className="space-y-6">
            {/* Main Controls */}
            <div className="bg-white rounded-2xl shadow-lg p-6">
              <h2 className="text-xl font-bold text-gray-900 mb-6">Main Controls</h2>
              
              <div className="grid grid-cols-2 gap-3 mb-6">
                <ControlButton
                  icon={Play}
                  label="Run"
                  onClick={toggleRunning}
                  active={isRunning}
                  color="green"
                />
                <ControlButton
                  icon={Pause}
                  label="Stop"
                  onClick={() => setIsRunning(false)}
                  active={!isRunning && isConnected}
                  color="red"
                />
                <ControlButton
                  icon={RotateCcw}
                  label="Reset"
                  onClick={resetBoard}
                />
                <ControlButton
                  icon={Upload}
                  label="Upload"
                  onClick={() => {}}
                />
              </div>
              
              <div className="space-y-3">
                <ControlButton
                  icon={Power}
                  label="Power Cycle"
                  onClick={() => {}}
                />
                <ControlButton
                  icon={Download}
                  label="Download Code"
                  onClick={() => {}}
                />
              </div>
            </div>

            {/* Sensors & Modules */}
            <div className="bg-white rounded-2xl shadow-lg p-6">
              <h2 className="text-xl font-bold text-gray-900 mb-6">Sensors & Modules</h2>
              
              <div className="grid grid-cols-3 gap-3">
                <ControlButton icon={Thermometer} label="Temp" onClick={() => {}} />
                <ControlButton icon={Lightbulb} label="Light" onClick={() => {}} />
                <ControlButton icon={Volume2} label="Sound" onClick={() => {}} />
                <ControlButton icon={Camera} label="Camera" onClick={() => {}} />
                <ControlButton icon={Mic} label="Mic" onClick={() => {}} />
                <ControlButton icon={Radio} label="RFID" onClick={() => {}} />
                <ControlButton icon={Zap} label="Motion" onClick={() => {}} />
                <ControlButton icon={Activity} label="Heart" onClick={() => {}} />
                <ControlButton icon={Wifi} label="WiFi" onClick={() => {}} />
              </div>
            </div>

            {/* Status Panel */}
            <div className="bg-white rounded-2xl shadow-lg p-6">
              <h2 className="text-xl font-bold text-gray-900 mb-6">Status</h2>
              
              <div className="space-y-4">
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Board Status</span>
                  <span className={`px-2 py-1 rounded text-xs font-medium ${
                    isConnected ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                  }`}>
                    {isConnected ? 'Online' : 'Offline'}
                  </span>
                </div>
                
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Execution</span>
                  <span className={`px-2 py-1 rounded text-xs font-medium ${
                    isRunning ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
                  }`}>
                    {isRunning ? 'Running' : 'Stopped'}
                  </span>
                </div>
                
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Active Pins</span>
                  <span className="text-sm font-medium text-gray-800">
                    {Object.values(pinStates).filter(state => state).length} / 14
                  </span>
                </div>
                
                <div className="flex justify-between items-center">
                  <span className="text-gray-600">Connection</span>
                  <span className="text-sm font-medium text-gray-800 uppercase">
                    {connectionType}
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Quick Actions */}
        <div className="mt-6 bg-white rounded-2xl shadow-lg p-6">
          <h2 className="text-xl font-bold text-gray-900 mb-4">Quick Actions</h2>
          <div className="flex flex-wrap gap-3">
            <button className="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg transition-colors duration-200">
              LED Blink
            </button>
            <button className="px-4 py-2 bg-green-500 hover:bg-green-600 text-white rounded-lg transition-colors duration-200">
              Servo Control
            </button>
            <button className="px-4 py-2 bg-purple-500 hover:bg-purple-600 text-white rounded-lg transition-colors duration-200">
              Motor Control
            </button>
            <button className="px-4 py-2 bg-orange-500 hover:bg-orange-600 text-white rounded-lg transition-colors duration-200">
              Sensor Read
            </button>
            <button className="px-4 py-2 bg-red-500 hover:bg-red-600 text-white rounded-lg transition-colors duration-200">
              Emergency Stop
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default App;